name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript type checking
      run: npm run typecheck
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: dist/
        key: build-${{ github.sha }}
        restore-keys: build-

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Restore build artifacts
      id: cache-build
      uses: actions/cache@v3
      with:
        path: dist/
        key: build-${{ github.sha }}
        restore-keys: build-
    
    - name: Build TypeScript (fallback)
      run: npm run build
      if: steps.cache-build.outputs.cache-hit != 'true'
    
    - name: Run unit tests
      run: npm run test:unit

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Restore build artifacts
      id: cache-build
      uses: actions/cache@v3
      with:
        path: dist/
        key: build-${{ github.sha }}
        restore-keys: build-
    
    - name: Build TypeScript (fallback)
      run: npm run build
      if: steps.cache-build.outputs.cache-hit != 'true'
    
    - name: Start LocalStack
      uses: LocalStack/setup-localstack@v0.2.2
      with:
        image-tag: 'latest'
        install-awslocal: 'true'
        configuration: DEBUG=1,SERVICES=s3
    
    - name: Create S3 bucket in LocalStack
      run: |
        echo "Creating S3 bucket in LocalStack..."
        awslocal s3 mb s3://test-bucket || echo "Bucket may already exist"
        
        # Verify bucket was created
        echo "Verifying bucket creation..."
        awslocal s3 ls
      env:
        AWS_DEFAULT_REGION: us-east-1
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        npm run test:integration:ci
      env:
        LOCALSTACK_ENDPOINT: http://127.0.0.1:4566
        S3_TEST_BUCKET: test-bucket
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_REGION: us-east-1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
    
    - name: Check for known vulnerabilities
      run: npm audit --json --audit-level=moderate | jq -r '.vulnerabilities | length' | xargs -I {} sh -c 'if [ {} -gt 0 ]; then echo "Found {} vulnerabilities"; exit 1; fi'
    
    - name: Check for outdated dependencies
      run: npm outdated --depth=0 || true

  all-tests:
    name: All Tests Status
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: All tests completed
      run: echo "All tests have completed successfully"

  auto-release:
    name: Auto Release on Version Change
    runs-on: ubuntu-latest
    needs: [all-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        registry-url: https://registry.npmjs.org/
        cache: 'npm'
    
    - name: Get current package version
      id: current_version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Check if tag exists
      id: check_tag
      run: |
        TAG_NAME="v${{ steps.current_version.outputs.version }}"
        if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag ${TAG_NAME} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag ${TAG_NAME} does not exist"
        fi
    
    - name: Get previous version from git
      id: previous_version
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        # Get the package.json from the previous commit
        PREV_VERSION=$(git show HEAD~1:package.json 2>/dev/null | node -p "try { JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version } catch(e) { '0.0.0' }" || echo "0.0.0")
        echo "version=$PREV_VERSION" >> $GITHUB_OUTPUT
        echo "Previous version: $PREV_VERSION"
    
    - name: Check if version changed
      id: version_changed
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        if [ "${{ steps.current_version.outputs.version }}" != "${{ steps.previous_version.outputs.version }}" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Version changed from ${{ steps.previous_version.outputs.version }} to ${{ steps.current_version.outputs.version }}"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "Version has not changed"
        fi
    
    - name: Create and push tag
      if: steps.check_tag.outputs.exists == 'false' && steps.version_changed.outputs.changed == 'true'
      run: |
        TAG_NAME="v${{ steps.current_version.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"
        git push origin "${TAG_NAME}"
        echo "Created and pushed tag: ${TAG_NAME}"
    
    - name: Create GitHub Release
      if: steps.check_tag.outputs.exists == 'false' && steps.version_changed.outputs.changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.current_version.outputs.version }}
        name: Release v${{ steps.current_version.outputs.version }}
        body: |
          ## ðŸš€ Release v${{ steps.current_version.outputs.version }}
          
          This release was automatically created due to a version change in package.json.
          
          ### Installation
          ```bash
          npm install @banana.inc/cacheman-s3@${{ steps.current_version.outputs.version }}
          ```
          
          ### Changes
          View the [commit history](https://github.com/${{ github.repository }}/compare/v${{ steps.previous_version.outputs.version }}...v${{ steps.current_version.outputs.version }}) for this release.
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install dependencies
      if: steps.check_tag.outputs.exists == 'false' && steps.version_changed.outputs.changed == 'true'
      run: npm ci
    
    - name: Build TypeScript
      if: steps.check_tag.outputs.exists == 'false' && steps.version_changed.outputs.changed == 'true'
      run: npm run build
    
    - name: Publish to NPM
      if: steps.check_tag.outputs.exists == 'false' && steps.version_changed.outputs.changed == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Verify NPM publication
      if: steps.check_tag.outputs.exists == 'false' && steps.version_changed.outputs.changed == 'true'
      run: |
        echo "Waiting for package to be available on NPM..."
        sleep 30
        npm view @banana.inc/cacheman-s3@${{ steps.current_version.outputs.version }}
        echo "âœ… Package successfully published to NPM"